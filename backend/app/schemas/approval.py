"""Pydantic schemas for booking approval workflow operations."""

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, field_validator

from app.models.approval import ApprovalDecision


def _normalise_reason(value: Optional[str]) -> Optional[str]:
    if value is None:
        return None

    trimmed = " ".join(value.split())
    if not trimmed:
        return None

    if len(trimmed) > 500:
        msg = "Reason must be at most 500 characters"
        raise ValueError(msg)

    return trimmed


class ApprovalActionRequest(BaseModel):
    """Payload supplied when approving or rejecting a booking request."""

    reason: Optional[str] = Field(default=None, max_length=500)

    model_config = ConfigDict(extra="forbid")

    @field_validator("reason")
    @classmethod
    def _normalise_reason(
        cls, value: Optional[str]
    ) -> Optional[str]:
        return _normalise_reason(value)


class ApprovalRead(BaseModel):
    """Representation of a recorded approval decision."""

    id: int
    booking_request_id: int
    approver_id: int
    approval_level: int
    decision: ApprovalDecision
    reason: Optional[str] = None
    decided_at: datetime

    model_config = ConfigDict(from_attributes=True)


class ApprovalNotificationRead(BaseModel):
    """Schema describing notifications generated by approval decisions."""

    booking_id: int
    requester_id: int
    approver_id: int
    decision: ApprovalDecision
    message: str
    reason: Optional[str] = None
    decided_at: datetime

    model_config = ConfigDict(from_attributes=True)


class PendingApprovalNotificationRead(BaseModel):
    """Schema for booking requests awaiting approval."""

    booking_id: int
    requester_id: int
    requester_name: str
    department: Optional[str] = None
    purpose: str
    submitted_at: datetime
    start_datetime: datetime
    end_datetime: datetime
    hours_pending: int

    model_config = ConfigDict(from_attributes=True)


from app.schemas.booking import BookingRequestRead  # noqa: E402  (circular import safe)


class BookingApprovalResponse(BaseModel):
    """Response payload returned after recording an approval decision."""

    booking: BookingRequestRead
    approval: ApprovalRead
    notification: ApprovalNotificationRead

    model_config = ConfigDict(from_attributes=True)


__all__ = [
    "ApprovalActionRequest",
    "ApprovalNotificationRead",
    "ApprovalRead",
    "PendingApprovalNotificationRead",
    "BookingApprovalResponse",
]

